<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reviewMapper">
	<resultMap type="Review" id="resultReview">
		<id column="review_no" property="review_no" />
		<result column="review_title" property="review_title" />
		<result column="review_writer" property="review_writer" />
		<result column="review_content" property="review_content" />
		<result column="review_original_filename"
			property="review_original_filename" />
		<result column="review_rename_filename"
			property="review_rename_filename" />
		<result column="review_date" property="review_date" />
		<!-- <result column="review_level" property="review_level" /> -->
		<!-- <result column="review_ref" property="review_ref" /> -->
		<!-- <result column="review_comment_ref" property="review_comment_ref" /> -->
		<!-- <result column="review_comment_seq" property="review_comment_seq" /> -->
		<result column="review_readcount" property="review_readcount" />
	</resultMap>

	<resultMap type="Review" id="resultTop3">
		<result column="review_no" property="review_no" />
		<result column="review_title" property="review_title" />
		<result column="review_readcount" property="review_readcount" />
	</resultMap>

	<!-- 비교연산자를 쿼리문에 그냥 사용하면 태그 엘리먼트 꺽쇠괄호 등(<, >, &)과 혼동하는 문제가 발생할 수 있음. 이 문제를 
		미연에 방지하기 위해 xml 코드 중 xml parser 에 의해 해석하지 말고 문장 그대로 해석하라는 뜻으로 <![CDATA[ 쿼리문 
		]]> 사용함. -->

	<!-- 검색 -->
	<select id="selectSearchtitle" parameterType="string"
		resultMap="resultReview">
		select * from review where review_title like '%' ||
		#{keyword} || '%' order
		by review_no desc
	</select>
	
	<select id="selectSearchcontent" parameterType="string"
		resultMap="resultReview">
		select * from review where review_content like '%' ||
		#{keyword} || '%'
		order by review_no desc
	</select>
	
	<!-- 수정 -->
	<update id="updateReview" parameterType="Review">
		update review
		set review_title = #{ review_title },
		review_content = #{ review_content },
		<if test="review_original_filename != null">
			review_original_filename = #{ review_original_filename },
			review_rename_filename = #{ review_rename_filename }
		</if>
		<if test="review_original_filename == null">
			review_original_filename = null,
			review_rename_filename = null
		</if>
		where review_no = #{ review_no }
	</update>

	<!-- 삭제 -->
	<delete id="deleteReview" parameterType="Review">
		delete from review
		where review_no = #{ review_no }
	</delete>
	
	<!-- 리스트 -->
	<select id="selectList"
		parameterType="com.kh.danaa.review.model.vo.ReviewPage"
		resultMap="resultReview">
		<![CDATA[
		select * 
		from (select rownum rnum, review_no, review_title, review_writer, review_content, 
					review_original_filename, review_rename_filename, review_date, 
					review_ref, review_readcount 
				from(select * from review order by review_ref desc)) 
	where rnum >= #{ startRow } and rnum <= #{ endRow }
		]]>
	</select>
	
	<!-- 상세보기 -->
	<select id="selectReview" parameterType="_int"
		resultMap="resultReview">
		select * from review where review_no = #{ review_no }
	</select>

	<select id="selectDetail" parameterType="_int"
		resultMap="resultReview">
		<![CDATA[
		select *
		from (select * from review where review_no < #{ review_no } order by
		review_no desc)
		where rownum = 1
		]]>
		union
		select * from review where review_no = #{ review_no }
		union
		<![CDATA[
		select *
		from (select * from review where review_no > #{ review_no } order by
		review_no asc)
		where rownum = 1
		]]>
	</select>

	<!-- 등록 -->
	<insert id="insertOriginReview" parameterType="Review">
		insert into review
		values ((select max(review_no) + 1 from review),
		#{ review_title }, #{ review_writer }, #{ review_content },
		<if test="review_original_filename != null">
			#{ review_original_filename }, #{ review_rename_filename },
		</if>
		<if test="review_original_filename == null">
			null, null,
		</if>
		sysdate, (select max(review_no) +1 from review), 0)
	</insert>
	
	<!-- 페이징 -->
	<select id="getListCount" resultType="_int">
		select count(*) from review
	</select>
	
	<update id="addReadCount" parameterType="_int">
		update review
		set
		review_readcount = review_readcount + 1
		where review_no = #{ review_no }
	</update>
	
	<!-- 새글 -->
	<select id="recount" resultType="_int">
		select count(*) from review where review_date like sysdate
	</select>
	
	<!-- 조회수 순 top3 -->
	<select id="reviewTop3" resultMap="resultReview">
	<![CDATA[
		select * from (select * from review order by REVIEW_READCOUNT desc) where rownum < 4
		]]>
	</select>
	
</mapper>
